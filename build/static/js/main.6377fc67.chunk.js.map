{"version":3,"sources":["logo.svg","Piece.js","Board.js","Logic.js","Settings.js","Stats.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Piece","props","style","width","height","border","cursor","onClick","click","margin","backgroundColor","state","borderRadius","display","Board","rows","idx","genClick","i","row","j","push","key","board","padding","checkBoard","length","Math","sqrt","x","y","type","found","xx","yy","ii","jj","n","tmp","hash","c12x","c12y","flip","abs","newBoard","Array","a","b","t","l","s","boardToString","checked","Map","lastBestMove","positionsChecked","size","Settings","id","onChange","red","htmlFor","defaultChecked","black","stats","Stats","winningMessage","score","bestMoves","join","Game","boardClick","ai","gameOver","turn","moves","aiRed","aiBlack","slice","setState","setTimeout","doAIStats","aiRedClick","e","target","aiMove","aiBlackClick","statsClick","reset","fill","console","log","scorePosition","orig","bh","has","get","nextTurn","v","set","bestScore","worstScore","bestScoreMove","worstScoreMove","sc","this","floor","random","winMessage","msg","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,0ICc5BC,MAZf,SAAeC,GAEX,OAAO,yBAAKC,MAAO,CAACC,MAAO,GAAIC,OAAQ,GAAIC,OAAQ,kBAAmBC,OAAQ,WAAYC,QAAS,kBAAMN,EAAMO,UAAS,yBAAKN,MAAO,CAChIE,OAAQ,OACRD,MAAO,OACPM,OAAQ,OACRC,gBAAiC,IAAhBT,EAAMU,MAAc,OAAyB,IAAhBV,EAAMU,MAAc,OAAS,OAC3EC,aAAc,MACdC,QAAS,oBCUFC,MAjBf,SAAeb,GAMX,IALA,IAAIc,EAAO,GACPC,EAAM,EACJC,EAAW,SAACD,GACd,OAAO,kBAAMf,EAAMO,MAAMQ,KAEpBE,EAAI,EAAGA,EAAIjB,EAAME,MAAOe,IAAK,CAElC,IADA,IAAIC,EAAM,GACDC,EAAI,EAAGA,EAAInB,EAAME,MAAOiB,IAC7BD,EAAIE,KAAK,yBAAKC,IAAKF,EAAGlB,MAAO,CAACW,QAAS,iBAAiB,kBAAC,EAAD,CAAOF,MAAOV,EAAMsB,MAAMP,GAAMR,MAAOS,EAASD,OACxGA,IAEJD,EAAKM,KAAK,yBAAKC,IAAKJ,EAAGhB,MAAO,CAACE,OAAQ,SAAUe,IAErD,OAAO,yBAAKjB,MAAO,CAACsB,QAAS,SAAUT,ICepC,SAASU,EAAWF,GAEvB,IADA,IAAIG,EAASC,KAAKC,KAAKL,EAAMG,QACpBR,EAAI,EAAGA,EAAIQ,EAAO,EAAGR,IAC1B,IAAK,IAAIE,EAAI,EAAGA,EAAIM,EAAO,EAAGN,IAC1B,IAAK,IAAIS,EAAI,EAAGA,EAAIH,EAAOR,EAAGW,IAC1B,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAON,EAAGU,IAAK,CAC/B,IAAIC,EAAOR,EAAML,EAAIE,EAAEM,GACvB,GAAa,IAATK,EAAJ,CAKA,IAFA,IAAIC,GAAQ,EACRC,EAAKJ,EAAGK,EAAKJ,EAAGK,EAAKjB,EAAIW,EAAGO,EAAKhB,EAAIU,EAChCO,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,GAAIF,EAAK,GAAKC,EAAK,GAAKD,GAAMT,GAAUU,GAAMV,EAAQ,CAClDM,GAAQ,EACR,MAEJ,GAAIT,EAAMY,EAAKC,EAAGV,KAAYK,EAAM,CAChCC,GAAQ,EACR,MAEJ,IAAIM,EAAML,EAGVE,GAFAF,GAAMC,EAGNE,GAFAF,EAAKI,EAIT,IAAKN,EACD,OAAO,GAM3B,OAAO,EAGX,SAASO,EAAKhB,GAIV,IAHA,IAAIiB,EAAO,EACPC,EAAO,EACPf,EAASC,KAAKC,KAAKL,EAAMG,QACpBR,EAAI,EAAGA,EAAIQ,EAAQR,IACxB,IAAK,IAAIE,EAAI,EAAGA,EAAIM,EAAQN,IACI,IAAxBG,EAAML,EAAIE,EAAEM,KACZc,GAAQtB,EAAI,GAAKQ,EAAO,EACxBe,GAAQrB,EAAI,GAAKM,EAAO,GAEA,IAAxBH,EAAML,EAAIE,EAAEM,KACZc,GAA6B,IAApBtB,EAAI,GAAKQ,EAAO,GACzBe,GAA8B,IAArBrB,EAAI,GAAKM,EAAO,IAMrC,IAFA,IAAIgB,EAAOf,KAAKgB,IAAIH,GAAQb,KAAKgB,IAAIF,GACjCG,EAAW,IAAIC,MAAMtB,EAAMG,QACtBR,EAAI,EAAGA,EAAIQ,EAAQR,IACxB,IAAK,IAAIE,EAAI,EAAGA,EAAIM,EAAQN,IAAK,CAC7B,IAAIS,EAAIX,EACJY,EAAIV,EACJoB,EAAO,IACPX,EAAIH,EAAS,EAAIG,GAEjBY,EAAO,IACPX,EAAIJ,EAAS,EAAII,GAErB,IAAIgB,EAAI5B,EACJ6B,EAAI3B,EACR,GAAIsB,EAAM,CACN,IAAIM,EAAIF,EACRA,EAAIC,EACJA,EAAIC,EAERJ,EAASE,EAAIC,EAAErB,GAAUH,EAAMM,EAAIC,EAAEJ,GAG7C,OA3GJ,SAAuBH,GAGnB,IAFA,IAAI0B,EAAItB,KAAKC,KAAKL,EAAMG,QACpBwB,EAAI,GACChC,EAAI,EAAGA,EAAI+B,EAAG/B,IAAK,CACxB,IAAK,IAAIE,EAAI,EAAGA,EAAI6B,EAAG7B,IACnB8B,GAAK3B,EAAML,EAAIE,EAAE6B,GAErBC,GAAK,KAET,OAAOA,EAkGAC,CAAcP,GAGzB,IAAIQ,EAAU,IAAIC,IAEPC,EAAe,GAKnB,SAASC,IACZ,OAAOH,EAAQI,KCzGJC,MAXf,SAAkBxD,GACd,OAAO,8BACH,2BAAO8B,KAAK,WAAW2B,GAAG,MAAMC,SAAU1D,EAAM2D,MAChD,2BAAOC,QAAQ,OAAf,gBAAyC,6BACzC,2BAAO9B,KAAK,WAAW2B,GAAG,QAAQI,gBAAc,EAACH,SAAU1D,EAAM8D,QACjE,2BAAOF,QAAQ,SAAf,kBAA6C,6BAC7C,2BAAO9B,KAAK,WAAW2B,GAAG,QAAQC,SAAU1D,EAAM+D,QAClD,2BAAOH,QAAQ,SAAf,oBAA+C,+BCQxCI,MAff,SAAehE,GACX,IAAIiE,EAAiB,iBAOrB,OANIjE,EAAMkE,MAAQ,IAChBD,EAAiB,eAEfjE,EAAMkE,MAAQ,IAChBD,EAAiB,iBAEZ,6BACL,6BAAMA,GACN,mDAAyBjE,EAAMsD,kBAC/B,oDAA0BtD,EAAMmE,UAAUC,KAAK,SCuItCC,E,kDA5IX,WAAYrE,GAAQ,IAAD,uBACf,cAAMA,IAkBVsE,WAAa,SAACvD,EAAKwD,GACf,IAAI,EAAK7D,MAAM8D,UAGe,IAA1B,EAAK9D,MAAMY,MAAMP,GAArB,CAGA,IAAI0D,EAAO,EAAK/D,MAAMgE,MAAQ,EAAI,EAClC,GAAKH,KAAiB,IAATE,GAAc,EAAK/D,MAAMiE,OAAoB,IAATF,GAAc,EAAK/D,MAAMkE,SAA1E,CAIA,IAAIjC,EAAW,EAAKjC,MAAMY,MAAMuD,MAAM,GACtClC,EAAS5B,GAAO0D,EAChB,EAAKK,SAAS,CAACxD,MAAOqB,EAAU+B,MAAO,EAAKhE,MAAMgE,MAAQ,IAAI,WAC1DK,YAAW,WACP,EAAKC,UAAUrC,EAAU,EAAE8B,KAC5B,SApCQ,EAyEnBQ,WAAa,SAACC,GACV,EAAKJ,SAAS,CACVH,MAAOO,EAAEC,OAAOhC,UAEhB,EAAKzC,MAAMgE,MAAQ,IAAM,GACzBK,YAAW,WACP,EAAKK,WACN,IAhFQ,EAoFnBC,aAAe,SAACH,GACZ,EAAKJ,SAAS,CACVF,QAASM,EAAEC,OAAOhC,UAElB,EAAKzC,MAAMgE,MAAQ,IAAM,GACzBK,YAAW,WACP,EAAKK,WACN,IA3FQ,EA+FnBE,WAAa,SAACJ,GACV,EAAKJ,SAAS,CACVf,MAAOmB,EAAEC,OAAOhC,WAjGL,EAqGnBoC,MAAQ,WACJ,IAAIjE,EAAQ,IAAIsB,MAAM,EAAK5C,MAAME,MAAM,EAAKF,MAAME,OAClDoB,EAAMkE,KAAK,GACX,EAAKV,SAAS,CACVxD,MAAOA,EACPoD,MAAO,EACPR,MAAO,EACPb,aAAc,GACdC,iBAAkB,EAClBkB,UAAU,IACX,WACCO,YAAW,WACH,EAAKrE,MAAMiE,OACX,EAAKK,UAAU,EAAKtE,MAAMY,MAAO,KAEtC,SAjHP,IAAIA,EAAQ,IAAIsB,MAAM5C,EAAME,MAAMF,EAAME,OAHzB,OAIfoB,EAAMkE,KAAK,GAEX,EAAK9E,MAAQ,CACTY,MAAOA,EACPoD,MAAO,EACPX,OAAO,EACPY,OAAO,EACPC,SAAS,EACTV,MAAO,EACPb,aAAc,GACdC,iBAAkB,EAClBkB,UAAU,GAfC,E,sDAwCTlD,EAAOmD,GAAO,IAAD,OACnBgB,QAAQC,IAAIpE,GACZ,IAAI4C,EHuEL,SAASyB,EAAcrE,EAAOmD,EAAMmB,GACnCA,IACAvC,EAAe,IAEnB,IAAIwC,EAAKvD,EAAKhB,GACd,GAAI6B,EAAQ2C,IAAID,GACZ,OAAO1C,EAAQ4C,IAAIF,GAEvB,IAAIG,EAAW,EAAIvB,EAGnB,IAFejD,EAAWF,GAEX,CACX,IAAI2E,EAAa,IAATxB,EAAa,GAAK,EAE1B,OADAtB,EAAQ+C,IAAIL,EAAII,GACTA,EAUX,IAPA,IAAIE,GAAa,EACbC,EAAa,EACbC,EAAgB,GAChBC,EAAiB,GAEjB5B,EAAQ,EAEHzD,EAAI,EAAGA,EAAIK,EAAMG,OAAQR,IAC9B,GAAiB,IAAbK,EAAML,GAAU,CACZ2E,GACAH,QAAQC,IAAIzE,GAEhByD,IAEA,IAAI/B,EAAWrB,EAAMuD,MAAM,GAC3BlC,EAAS1B,GAAKwD,EACd,IAAI8B,EAAKZ,EAAchD,EAAUqD,GAejC,GAdIO,IAAOJ,GACPE,EAAcjF,KAAKH,GAEnBsF,IAAOH,GACPE,EAAelF,KAAKH,GAEpBsF,EAAKJ,IACLA,EAAYI,EACZF,EAAgB,CAACpF,IAEjBsF,EAAKH,IACLA,EAAaG,EACbD,EAAkB,CAACrF,IAEV,IAATwD,GAAc0B,EAAY,EAC1B,MAEJ,GAAa,IAAT1B,GAAc2B,EAAa,EAC3B,MAYZ,GARIR,IAEIvC,EADS,IAAToB,EACe4B,EAEAC,GAIT,IAAV5B,EAEA,OADAvB,EAAQ+C,IAAIL,EAAI,GACT,EAGX,IAAI3B,EAAiB,IAATO,EAAa0B,EAAYC,EAMrC,OALAjD,EAAQ+C,IAAIL,EAAI3B,GACZf,EAAQI,KAAO,OACfkC,QAAQC,IAAI,SACZvC,EAAU,IAAIC,KAEXc,EGlJSyB,CAAcrE,EAAOmD,GAAM,GACvCgB,QAAQC,IAAI,QAASpE,GACrBmE,QAAQC,IAAI,OAAQjB,GACpBgB,QAAQC,IAAI,QAASxB,GACrBuB,QAAQC,IAAI,YAAarC,GACzBoC,QAAQC,IAAI,oBAAqBpC,KAChB9B,EAAWF,IACY,KAArBkF,KAAK9F,MAAMgE,OAC1B8B,KAAK1B,SAAS,CACVN,UAAU,IAGlBgC,KAAK1B,SAAS,CACVZ,MAAOA,EACPb,aAAcA,EACdC,iBAAkBA,MAElBD,EAAa5B,QAAU,IACT,IAATgD,GAAc+B,KAAK9F,MAAMkE,SAAsB,IAATH,GAAc+B,KAAK9F,MAAMiE,QAChEI,YAAW,WACP,EAAKT,WAAWjB,EAAa3B,KAAK+E,MAAM/E,KAAKgF,SAAWrD,EAAa5B,UAAU,KAChF,KH2Cf0B,EAAU,IAAIC,M,+BGpCVoD,KAAKxB,UAAUwB,KAAK9F,MAAMY,MAAOkF,KAAK9F,MAAMgE,MAAQ,EAAI,K,+BAmDxD,IAAIiC,EAAa,KACjB,GAAIH,KAAK9F,MAAM8D,SAAU,CACrB,IAAIoC,EAAM,OACNJ,KAAK9F,MAAMwD,MAAQ,IACnB0C,EAAM,aAENJ,KAAK9F,MAAMwD,MAAQ,IACnB0C,EAAM,eAEVD,EAAa,6BAAK,4BAAKC,GAAS,4BAAQtG,QAASkG,KAAKjB,OAAtB,UAEpC,OAAO,6BACC,kBAAC,EAAD,CAAOrF,MAAOsG,KAAKxG,MAAME,MAAOoB,MAAOkF,KAAK9F,MAAMY,MAAOf,MAAOiG,KAAKlC,aACpEqC,EACD,kBAAC,EAAD,CAAUhD,IAAK6C,KAAKvB,WAAYnB,MAAO0C,KAAKnB,aAActB,MAAOyC,KAAKlB,aACrEkB,KAAK9F,MAAMqD,MAAQ,kBAAC,EAAD,CAAOG,MAAOsC,KAAK9F,MAAMwD,MAAOC,UAAWqC,KAAK9F,MAAM2C,aAAcC,iBAAkBkD,KAAK9F,MAAM4C,mBAA6B,U,GA1I/IuD,IAAMC,WCSVC,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,gDADF,qCAGE,kBAAC,EAAD,CAAM9G,MAAO,MCEC+G,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.6377fc67.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nfunction Piece(props) {\r\n    \r\n    return <div style={{width: 50, height: 50, border: '2px solid black', cursor: 'pointer'}} onClick={() => props.click()}><div style={{\r\n        height: '25px',\r\n        width: '25px',\r\n        margin: '12px',\r\n        backgroundColor: props.state === 0 ? '#fff' : props.state === 1 ? '#f33' : '#333',\r\n        borderRadius: '50%',\r\n        display: 'inline-block',\r\n      }}></div></div>\r\n}\r\n\r\nexport default Piece;","import React from 'react';\r\nimport Piece from './Piece';\r\n\r\nfunction Board(props) {\r\n    let rows = [];\r\n    let idx = 0;\r\n    const genClick = (idx) => {\r\n        return () => props.click(idx);\r\n    }\r\n    for (let i = 0; i < props.width; i++) {\r\n        let row = [];\r\n        for (let j = 0; j < props.width; j++) {\r\n            row.push(<div key={j} style={{display: 'inline-block'}}><Piece state={props.board[idx]} click={genClick(idx)}></Piece></div>);\r\n            idx++;\r\n        }\r\n        rows.push(<div key={i} style={{height: '54px'}}>{row}</div>)\r\n    }\r\n    return <div style={{padding: '10px'}}>{rows}</div>\r\n}\r\n\r\nexport default Board;","function boardToString(board) {\r\n    let l = Math.sqrt(board.length);\r\n    let s = '';\r\n    for (let i = 0; i < l; i++) {\r\n        for (let j = 0; j < l; j++) {\r\n            s += board[i + j*l];\r\n        }\r\n        s += '\\n';\r\n    }\r\n    return s;\r\n}\r\n\r\n\r\nfunction boardToEnc(board) {\r\n    let s = [];\r\n    let curAc = 0;\r\n    let Acc = 0;\r\n    for (let i = 0; i < board.length; i++) {\r\n        if (Acc === 4) {\r\n            Acc = 0;\r\n            s.push(String.fromCharCode(curAc));\r\n            curAc = 0;\r\n        }\r\n        curAc = curAc | (board[i] << (2*Acc));\r\n        Acc++;\r\n    }\r\n    if (Acc > 0) {\r\n        s.push(String.fromCharCode(curAc));\r\n    }\r\n    return s.join('');\r\n}\r\n\r\nexport function checkBoard(board) {\r\n    let length = Math.sqrt(board.length);\r\n    for (let i = 0; i < length-1; i++) {\r\n        for (let j = 0; j < length-1; j++) {\r\n            for (let x = 1; x < length-i; x++) {\r\n                for (let y = 0; y < length-j; y++) {\r\n                    let type = board[i + j*length];\r\n                    if (type === 0) {\r\n                        continue;\r\n                    }\r\n                    let found = false;\r\n                    let xx = x, yy = y, ii = i + x, jj = j + y;\r\n                    for (let n = 0; n < 3; n++) {\r\n                        if (ii < 0 || jj < 0 || ii >= length || jj >= length) {\r\n                            found = true;\r\n                            break;\r\n                        }\r\n                        if (board[ii + jj*length] !== type) {\r\n                            found = true;\r\n                            break;\r\n                        }\r\n                        let tmp = xx;\r\n                        xx = -yy;\r\n                        yy = tmp;\r\n                        ii += xx;\r\n                        jj += yy;\r\n                    }\r\n                    if (!found) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction hash(board) {\r\n    let c12x = 0;\r\n    let c12y = 0;\r\n    let length = Math.sqrt(board.length);\r\n    for (let i = 0; i < length; i++) {\r\n        for (let j = 0; j < length; j++) {\r\n            if (board[i + j*length] === 1) {\r\n                c12x += i + .5 - length/2;\r\n                c12y += j + .5 - length/2;\r\n            }\r\n            if (board[i + j*length] === 2) {\r\n                c12x += (i + .5 - length/2)* .9;\r\n                c12y += (j + .5 - length/2) * .9;\r\n            }\r\n        }\r\n    }\r\n    let flip = Math.abs(c12x) > Math.abs(c12y);\r\n    let newBoard = new Array(board.length);\r\n    for (let i = 0; i < length; i++) {\r\n        for (let j = 0; j < length; j++) {\r\n            let x = i;\r\n            let y = j;\r\n            if (c12x < 0) {\r\n                x = length - 1 - x;\r\n            }\r\n            if (c12y < 0) {\r\n                y = length - 1 - y;\r\n            }\r\n            let a = i;\r\n            let b = j;\r\n            if (flip) {\r\n                let t = a;\r\n                a = b;\r\n                b = t;\r\n            }\r\n            newBoard[a + b*length] = board[x + y*length];\r\n        }\r\n    }\r\n    return boardToString(newBoard);\r\n}\r\n\r\nlet checked = new Map();\r\n\r\nexport let lastBestMove = [];\r\nexport function clearCache() {\r\n    checked = new Map();\r\n}\r\n\r\nexport function positionsChecked() {\r\n    return checked.size;\r\n}\r\n\r\nexport function scorePosition(board, turn, orig) {\r\n    if (orig) {\r\n        lastBestMove = [];\r\n    }\r\n    let bh = hash(board);\r\n    if (checked.has(bh)) {\r\n        return checked.get(bh);\r\n    }\r\n    let nextTurn = 3 - turn;\r\n    let curCheck = checkBoard(board);\r\n\r\n    if (!curCheck) {\r\n        let v = turn === 1 ? 1 : -1;\r\n        checked.set(bh, v);\r\n        return v;\r\n    }\r\n\r\n    let bestScore = -9;\r\n    let worstScore = 9;\r\n    let bestScoreMove = [];\r\n    let worstScoreMove = [];\r\n\r\n    let moves = 0;\r\n    \r\n    for (let i = 0; i < board.length; i++) {\r\n        if (board[i] === 0) {\r\n            if (orig) {\r\n                console.log(i);\r\n            }\r\n            moves++;\r\n            //possible move;\r\n            let newBoard = board.slice(0);\r\n            newBoard[i] = turn;\r\n            let sc = scorePosition(newBoard, nextTurn);\r\n            if (sc === bestScore) {\r\n                bestScoreMove.push(i);\r\n            }\r\n            if (sc === worstScore) {\r\n                worstScoreMove.push(i);\r\n            }\r\n            if (sc > bestScore) {\r\n                bestScore = sc;\r\n                bestScoreMove = [i];\r\n            }\r\n            if (sc < worstScore) {\r\n                worstScore = sc;\r\n                worstScoreMove =  [i];\r\n            }\r\n            if (turn === 1 && bestScore > 0) {\r\n                break;\r\n            }\r\n            if (turn !== 1 && worstScore < 0) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (orig) {\r\n        if (turn === 1) {\r\n            lastBestMove = bestScoreMove;\r\n        } else {\r\n            lastBestMove = worstScoreMove;\r\n        }\r\n    }\r\n\r\n    if (moves === 0) {\r\n        checked.set(bh, 0);\r\n        return 0;\r\n    }\r\n\r\n    let score = turn === 1 ? bestScore : worstScore;\r\n    checked.set(bh, score);\r\n    if (checked.size > 15000000) {\r\n        console.log('clear')\r\n        checked = new Map();\r\n    }\r\n    return score;\r\n}\r\n","import React from 'react';\r\n\r\nfunction Settings(props) {\r\n    return <form>\r\n        <input type=\"checkbox\" id=\"red\" onChange={props.red}/>\r\n        <label htmlFor=\"red\">AI Plays Red</label><br/>\r\n        <input type=\"checkbox\" id=\"black\" defaultChecked onChange={props.black}/>\r\n        <label htmlFor=\"black\">AI Plays Black</label><br/>\r\n        <input type=\"checkbox\" id=\"stats\" onChange={props.stats}/>\r\n        <label htmlFor=\"stats\">Display AI Stats</label><br/>\r\n      </form>\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\n\r\nfunction Stats(props) {\r\n    let winningMessage = 'Game is a draw';\r\n    if (props.score > 0) {\r\n      winningMessage = 'Red can win';\r\n    }\r\n    if (props.score < 0) {\r\n      winningMessage = 'Black can win';\r\n    }\r\n    return <div>\r\n      <div>{winningMessage}</div>\r\n      <div>Positions Checked: {props.positionsChecked}</div>\r\n      <div>Best Moves (index): {props.bestMoves.join(', ')}</div>\r\n    </div>\r\n}\r\n\r\nexport default Stats;","import React from 'react';\r\nimport Board from './Board';\r\nimport { scorePosition, lastBestMove, clearCache, positionsChecked, checkBoard} from './Logic';\r\nimport Settings from './Settings';\r\nimport Stats from './Stats';\r\n\r\nclass Game extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let board = new Array(props.width*props.width);\r\n        board.fill(0);\r\n\r\n        this.state = {\r\n            board: board,\r\n            moves: 0,\r\n            stats: false,\r\n            aiRed: false,\r\n            aiBlack: true,\r\n            score: 0,\r\n            lastBestMove: [],\r\n            positionsChecked: 0,\r\n            gameOver: false,\r\n        }\r\n    }\r\n\r\n    boardClick = (idx, ai) => {\r\n        if (this.state.gameOver) {\r\n            return;\r\n        }\r\n        if (this.state.board[idx] !== 0) {\r\n            return;\r\n        }\r\n        let turn = this.state.moves % 2 + 1;\r\n        if (!ai && ((turn === 1 && this.state.aiRed) || (turn === 2 && this.state.aiBlack))) {\r\n            return;\r\n        }\r\n\r\n        let newBoard = this.state.board.slice(0);\r\n        newBoard[idx] = turn;\r\n        this.setState({board: newBoard, moves: this.state.moves + 1}, () => {\r\n            setTimeout(() => {\r\n                this.doAIStats(newBoard, 3-turn);\r\n            }, 0)\r\n        });\r\n    }\r\n\r\n    doAIStats(board, turn) {\r\n        console.log(board);\r\n        let score = scorePosition(board, turn, true);\r\n        console.log('Board', board);\r\n        console.log('Turn', turn);\r\n        console.log('Score', score);\r\n        console.log('Best Move', lastBestMove);\r\n        console.log('Positions Checked', positionsChecked());\r\n        let curBoardOk = checkBoard(board);\r\n        if (!curBoardOk || this.state.moves === 16) {\r\n            this.setState({\r\n                gameOver: true,\r\n            })\r\n        }\r\n        this.setState({\r\n            score: score,\r\n            lastBestMove: lastBestMove,\r\n            positionsChecked: positionsChecked(),\r\n        });\r\n        if (lastBestMove.length >= 0) {\r\n            if ((turn === 2 && this.state.aiBlack) || (turn === 1 && this.state.aiRed)) {\r\n                setTimeout(() => {\r\n                    this.boardClick(lastBestMove[Math.floor(Math.random() * lastBestMove.length)], true);\r\n                }, 100);\r\n            }\r\n        }\r\n        clearCache();\r\n    }\r\n\r\n    aiMove() {\r\n        this.doAIStats(this.state.board, this.state.moves % 2 + 1);\r\n    }\r\n\r\n    aiRedClick = (e) => {\r\n        this.setState({\r\n            aiRed: e.target.checked,\r\n        });\r\n        if (this.state.moves % 2 === 0) {\r\n            setTimeout(() => {\r\n                this.aiMove();\r\n            }, 0);\r\n        }\r\n    }\r\n\r\n    aiBlackClick = (e) => {\r\n        this.setState({\r\n            aiBlack: e.target.checked,\r\n        });\r\n        if (this.state.moves % 2 === 1) {\r\n            setTimeout(() => {\r\n                this.aiMove();\r\n            }, 0);\r\n        }\r\n    }\r\n\r\n    statsClick = (e) => {\r\n        this.setState({\r\n            stats: e.target.checked,\r\n        });\r\n    }\r\n\r\n    reset = () => {\r\n        let board = new Array(this.props.width*this.props.width);\r\n        board.fill(0);\r\n        this.setState({\r\n            board: board,\r\n            moves: 0,\r\n            score: 0,\r\n            lastBestMove: [],\r\n            positionsChecked: 0,\r\n            gameOver: false,\r\n        }, () => {\r\n            setTimeout(() => {\r\n                if (this.state.aiRed) {\r\n                    this.doAIStats(this.state.board, 1);\r\n                }\r\n            }, 200);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let winMessage = null;\r\n        if (this.state.gameOver) {\r\n            let msg = 'Tie!';\r\n            if (this.state.score > 0) {\r\n                msg = 'Red Wins!';\r\n            }\r\n            if (this.state.score < 0) {\r\n                msg = 'Black Wins!';\r\n            }\r\n            winMessage = <div><h4>{msg}</h4><button onClick={this.reset}>Reset</button></div>\r\n        }\r\n        return <div>\r\n                <Board width={this.props.width} board={this.state.board} click={this.boardClick}></Board>\r\n                {winMessage}\r\n                <Settings red={this.aiRedClick} black={this.aiBlackClick} stats={this.statsClick}></Settings>\r\n                {this.state.stats ? <Stats score={this.state.score} bestMoves={this.state.lastBestMove} positionsChecked={this.state.positionsChecked}></Stats> : null}\r\n            </div>\r\n    }\r\n}\r\nexport default Game;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>Avoid Square 4x4</h2>\n      Click any square to place a piece.\n      <Game width={4}></Game>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}